---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: eventing-kafka-addressable-resolver
  labels:
    kafka.eventing.knative.dev/release: devel
    duck.knative.dev/addressable: "true"
rules:
- apiGroups:
  - messaging.knative.dev
  resources:
  - kafkachannels
  - kafkachannels/status
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    duck.knative.dev/channelable: "true"
    kafka.eventing.knative.dev/release: devel
  name: kafka-channelable-manipulator
rules:
- apiGroups:
  - messaging.knative.dev
  resources:
  - kafkachannels
  - kafkachannels/status
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: eventing-kafka-channel-controller
  labels:
    kafka.eventing.knative.dev/release: devel
rules:
- apiGroups:
  - "" # Core API Group
  resources:
  - services
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
  - update
- apiGroups:
  - "" # Core API Group.
  resources:
  - events
  verbs:
  - create
  - patch
  - update
- apiGroups:
  - messaging.knative.dev
  resources:
  - channels
  - channels/status
  - subscriptions
  - subscriptions/status
  verbs:
  - get
  - list
  - watch
  - patch
  - update
- apiGroups:
  - messaging.knative.dev
  resources:
  - kafkachannels
  verbs:
  - get
  - list
  - watch
  - update
  - patch
- apiGroups:
  - messaging.knative.dev
  resources:
  - kafkachannels/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: eventing-kafka-channel-controller
  namespace: knative-eventing
  labels:
    kafka.eventing.knative.dev/release: devel
rules:
- apiGroups:
  - "" # Core API Group
  resources:
  - configmaps
  - secrets
  verbs:
  - get
  - list
  - watch
  - update
  - patch
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: eventing-kafka-channel-controller
  namespace: knative-eventing
  labels:
    kafka.eventing.knative.dev/release: devel
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kafka-webhook
  labels:
    kafka.eventing.knative.dev/release: devel
rules:
  - apiGroups:
      - ""
    resources:
      - "configmaps"
    verbs:
      - "get"
      - "list"
      - "watch"
  - apiGroups:
      - ""
    resources:
      - "secrets"
    verbs:
      - "get"
      - "create"
      - "list"
      - "watch"
      - "update"
  - apiGroups:
      - "apps"
    resources:
      - "deployments"
    verbs:
      - "get"
  - apiGroups:
      - "apps"
    resources:
      - "deployments/finalizers"
    verbs:
      - update
  - apiGroups:
      - "admissionregistration.k8s.io"
    resources:
      - "mutatingwebhookconfigurations"
      - "validatingwebhookconfigurations"
    verbs: &everything
      - "get"
      - "list"
      - "create"
      - "update"
      - "delete"
      - "patch"
      - "watch"
  - apiGroups:
      - "messaging.knative.dev"
    resources:
      - "kafkachannels"
      - "kafkachannels/status"
    verbs:
      - "get"
      - "list"
      - "watch"
  - apiGroups:
      - "coordination.k8s.io"
    resources:
      - "leases"
    verbs: *everything
  - apiGroups:
      - "apiextensions.k8s.io"
    resources:
      - "customresourcedefinitions"
    verbs:
      - "get"
      - "list"
      - "create"
      - "update"
      - "delete"
      - "patch"
      - "watch"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka-webhook
  namespace: knative-eventing
  labels:
    kafka.eventing.knative.dev/release: devel
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: eventing-kafka-channel-controller
  namespace: knative-eventing
  labels:
    kafka.eventing.knative.dev/release: devel
subjects:
- kind: ServiceAccount
  name: eventing-kafka-channel-controller
  namespace: knative-eventing
roleRef:
  kind: ClusterRole
  name: eventing-kafka-channel-controller
  apiGroup: rbac.authorization.k8s.io
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: eventing-kafka-channel-controller
  namespace: knative-eventing
  labels:
    kafka.eventing.knative.dev/release: devel
subjects:
- kind: ServiceAccount
  name: eventing-kafka-channel-controller
  namespace: knative-eventing
roleRef:
  kind: Role
  name: eventing-kafka-channel-controller
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kafka-webhook
  labels:
    kafka.eventing.knative.dev/release: devel
subjects:
- kind: ServiceAccount
  name: kafka-webhook
  namespace: knative-eventing
roleRef:
  kind: ClusterRole
  name: kafka-webhook
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
data:
  version: 1.0.0
  sarama: |
    enableLogging: false
    config: |
      Version: 2.0.0 # Kafka Version Compatibility From Sarama's Supported List (Major.Minor.Patch)
      Admin:
        Timeout: 10000000000  # 10 seconds
      Net:
        KeepAlive: 30000000000  # 30 seconds
        MaxOpenRequests: 1 # Set to 1 for use with Idempotent Producer
        TLS:
          Enable: true
        SASL:
          Enable: true
          Version: 1
      Metadata:
        RefreshFrequency: 300000000000  # 5 minutes
      Consumer:
        Offsets:
          AutoCommit:
            Interval: 5000000000  # 5 seconds
          Retention: 604800000000000  # 1 week
      Producer:
        Idempotent: true  # Must be false for Azure EventHubs
        RequiredAcks: -1  # -1 = WaitForAll, Most stringent option for "at-least-once" delivery.
  eventing-kafka: |
    cloudevents:
      maxIdleConns: 1000
      maxIdleConnsPerHost: 100
    kafka:
      authSecretName: kafka-cluster
      authSecretNamespace: knative-eventing
      brokers: REPLACE_WITH_CLUSTER_URL
      topic:
        defaultNumPartitions: 4
        defaultReplicationFactor: 1 # Cannot exceed the number of Kafka Brokers!
        defaultRetentionMillis: 604800000  # 1 week
    channel:
      adminType: kafka # One of "kafka", "azure", "custom"
      dispatcher:
        cpuRequest: 100m
        memoryRequest: 50Mi
      receiver:
        cpuRequest: 100m
        memoryRequest: 50Mi
kind: ConfigMap
metadata:
  name: config-kafka
  namespace: knative-eventing
---
apiVersion: v1
data:
  namespace: ""
  password: ""
  username: ""
  sasltype: ""
kind: Secret
metadata:
  name: kafka-cluster
  namespace: knative-eventing
type: Opaque
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: kafkachannels.messaging.knative.dev
  labels:
    kafka.eventing.knative.dev/release: devel
    knative.dev/crd-install: "true"
    messaging.knative.dev/subscribable: "true"
    duck.knative.dev/addressable: "true"
spec:
  group: messaging.knative.dev
  versions:
    - name: v1beta1
      served: true
      storage: true
      subresources:
        status: { }
      schema:
        openAPIV3Schema:
          description: 'KafkaChannel is a resource representing a Channel that is backed by a topic of an Apache Kafka cluster.'
          type: object
          properties:
            spec:
              description: Spec defines the desired state of the Channel.
              type: object
              properties:
                numPartitions:
                  description: NumPartitions is the number of partitions of a Kafka topic. By default, it is set to 1.
                  type: integer
                  format: int32
                  default: 1
                replicationFactor:
                  description: ReplicationFactor is the replication factor of a Kafka topic. By default, it is set to 1.
                  type: integer
                  maximum: 32767
                  default: 1
                delivery:
                  description: DeliverySpec contains the default delivery spec for each subscription to this Channelable. Each subscription delivery spec, if any, overrides this global delivery spec.
                  type: object
                  properties:
                    backoffDelay:
                      description: 'BackoffDelay is the delay before retrying. More information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html - https://en.wikipedia.org/wiki/ISO_8601  For linear policy, backoff delay is backoffDelay*<numberOfRetries>. For exponential policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                      type: string
                    backoffPolicy:
                      description: BackoffPolicy is the retry backoff policy (linear, exponential).
                      type: string
                    deadLetterSink:
                      description: DeadLetterSink is the sink receiving event that could not be sent to a destination.
                      type: object
                      properties:
                        ref:
                          description: Ref points to an Addressable.
                          type: object
                          properties:
                            apiVersion:
                              description: API version of the referent.
                              type: string
                            kind:
                              description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                            namespace:
                              description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ This is optional field, it gets defaulted to the object holding it if left out.'
                              type: string
                        uri:
                          description: URI can be an absolute URL(non-empty scheme and non-empty host) pointing to the target or a relative URI. Relative URIs will be resolved using the base URI retrieved from Ref.
                          type: string
                    retry:
                      description: Retry is the minimum number of retries the sender should attempt when sending an event before moving it to the dead letter sink.
                      type: integer
                      format: int32
                subscribers:
                  description: This is the list of subscriptions for this subscribable.
                  type: array
                  items:
                    type: object
                    properties:
                      delivery:
                        description: DeliverySpec contains options controlling the event delivery
                        type: object
                        properties:
                          backoffDelay:
                            description: 'BackoffDelay is the delay before retrying. More information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html - https://en.wikipedia.org/wiki/ISO_8601  For linear policy, backoff delay is backoffDelay*<numberOfRetries>. For exponential policy, backoff delay is backoffDelay*2^<numberOfRetries>.'
                            type: string
                          backoffPolicy:
                            description: BackoffPolicy is the retry backoff policy (linear, exponential).
                            type: string
                          deadLetterSink:
                            description: DeadLetterSink is the sink receiving event that could not be sent to a destination.
                            type: object
                            properties:
                              ref:
                                description: Ref points to an Addressable.
                                type: object
                                properties:
                                  apiVersion:
                                    description: API version of the referent.
                                    type: string
                                  kind:
                                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                                    type: string
                                  name:
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                    type: string
                                  namespace:
                                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ This is optional field, it gets defaulted to the object holding it if left out.'
                                    type: string
                              uri:
                                description: URI can be an absolute URL(non-empty scheme and non-empty host) pointing to the target or a relative URI. Relative URIs will be resolved using the base URI retrieved from Ref.
                                type: string
                          retry:
                            description: Retry is the minimum number of retries the sender should attempt when sending an event before moving it to the dead letter sink.
                            type: integer
                            format: int32
                      generation:
                        description: Generation of the origin of the subscriber with uid:UID.
                        type: integer
                        format: int64
                      replyUri:
                        description: ReplyURI is the endpoint for the reply
                        type: string
                      subscriberUri:
                        description: SubscriberURI is the endpoint for the subscriber
                        type: string
                      uid:
                        description: UID is used to understand the origin of the subscriber.
                        type: string
            status:
              description: Status represents the current state of the KafkaChannel. This data may be out of date.
              type: object
              required:
                - address
              properties:
                address:
                  type: object
                  required:
                    - url
                  properties:
                    url:
                      type: string
                annotations:
                  description: Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                conditions:
                  description: Conditions the latest available observations of a resource's current state.
                  type: array
                  items:
                    type: object
                    required:
                      - type
                      - status
                    properties:
                      lastTransitionTime:
                        description: LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
                        type: string
                      message:
                        description: A human readable message indicating details about the transition.
                        type: string
                      reason:
                        description: The reason for the condition's last transition.
                        type: string
                      severity:
                        description: Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
                        type: string
                      status:
                        description: Status of the condition, one of True, False, Unknown.
                        type: string
                      type:
                        description: Type of condition.
                        type: string
                deadLetterChannel:
                  description: DeadLetterChannel is a KReference and is set by the channel when it supports native error handling via a channel Failed messages are delivered here.
                  type: object
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ This is optional field, it gets defaulted to the object holding it if left out.'
                      type: string
                observedGeneration:
                  description: ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.
                  type: integer
                  format: int64
                subscribers:
                  description: This is the list of subscription's statuses for this channel.
                  type: array
                  items:
                    type: object
                    properties:
                      message:
                        description: A human readable message indicating details of Ready status.
                        type: string
                      observedGeneration:
                        description: Generation of the origin of the subscriber with uid:UID.
                        type: integer
                        format: int64
                      ready:
                        description: Status of the subscriber.
                        type: string
                      uid:
                        description: UID is used to understand the origin of the subscriber.
                        type: string
      additionalPrinterColumns:
        - name: Ready
          type: string
          jsonPath: ".status.conditions[?(@.type==\"Ready\")].status"
        - name: Reason
          type: string
          jsonPath: ".status.conditions[?(@.type==\"Ready\")].reason"
        - name: URL
          type: string
          jsonPath: .status.address.url
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
  names:
    kind: KafkaChannel
    plural: kafkachannels
    singular: kafkachannel
    categories:
      - all
      - knative
      - messaging
      - channel
    shortNames:
      - kc
  scope: Namespaced
  conversion:
    strategy: Webhook
    webhook:
      conversionReviewVersions: [ "v1", "v1beta1" ]
      clientConfig:
        service:
          name: kafka-webhook
          namespace: knative-eventing
---
apiVersion: v1
kind: Secret
metadata:
  name: messaging-webhook-certs
  namespace: knative-eventing
  labels:
    kafka.eventing.knative.dev/release: devel
---
apiVersion: v1
kind: Service
metadata:
  name: eventing-kafka-channel-controller
  namespace: knative-eventing
  labels:
    k8s-app: eventing-kafka-channel-controller
    kafka.eventing.knative.dev/release: devel
spec:
  selector:
    app: eventing-kafka-channel-controller
  ports:
  - name: metrics
    protocol: TCP
    port: 8081
    targetPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-webhook
  namespace: knative-eventing
  labels:
    kafka.eventing.knative.dev/release: devel
    role: kafka-webhook
spec:
  ports:
    - name: https-webhook
      port: 443
      targetPort: 8443
  selector:
    role: kafka-webhook
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eventing-kafka-channel-controller
  namespace: knative-eventing
  labels:
    app: eventing-kafka-channel-controller
    kafka.eventing.knative.dev/release: devel
spec:
  replicas: 1
  selector:
    matchLabels:
      app: eventing-kafka-channel-controller
      name: eventing-kafka-channel-controller
  template:
    metadata:
      labels:
        app: eventing-kafka-channel-controller
        name: eventing-kafka-channel-controller
    spec:
      serviceAccountName: eventing-kafka-channel-controller
      containers:
      - name: eventing-kafka
        image: registry.ci.openshift.org/openshift/knative-nightly:knative-eventing-kafka-distributed-controller
        imagePullPolicy: IfNotPresent # Must be IfNotPresent or Never if used with ko.local
        ports:
        - containerPort: 8081
          name: metrics
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: CONFIG_LEADERELECTION_NAME
          value: config-leader-election
        - name: SERVICE_ACCOUNT
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: METRICS_PORT
          value: "8081"
        - name: METRICS_DOMAIN
          value: "eventing-kafka"
        - name: RECEIVER_IMAGE
          value: "registry.ci.openshift.org/openshift/knative-nightly:knative-eventing-kafka-receiver"
        - name: DISPATCHER_IMAGE
          value: "registry.ci.openshift.org/openshift/knative-nightly:knative-eventing-kafka-distributed-dispatcher"
        resources:
          requests:
            cpu: 20m
            memory: 25Mi
        volumeMounts:
          - name: config-kafka
            mountPath: /etc/config-kafka
      volumes:
        - name: config-kafka
          configMap:
            name: config-kafka
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-webhook
  namespace: knative-eventing
  labels:
    kafka.eventing.knative.dev/release: devel
spec:
  replicas: 1
  selector:
    matchLabels: &labels
      app: kafka-webhook
      role: kafka-webhook
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels: *labels
    spec:
      serviceAccountName: kafka-webhook
      containers:
      - name: kafka-webhook
        terminationMessagePolicy: FallbackToLogsOnError
        image: registry.ci.openshift.org/openshift/knative-nightly:knative-eventing-kafka-webhook
        env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: METRICS_DOMAIN
          value: knative.dev/eventing
        - name: WEBHOOK_NAME
          value: kafka-webhook
        - name: WEBHOOK_PORT
          value: "8443"
        ports:
        - name: https-webhook
          containerPort: 8443
        - name: metrics
          containerPort: 9090
        - name: profiling
          containerPort: 8008
        readinessProbe: &probe
          periodSeconds: 1
          httpGet:
            scheme: HTTPS
            port: 8443
            httpHeaders:
            - name: k-kubelet-probe
              value: "webhook"
        livenessProbe:
          <<: *probe
          initialDelaySeconds: 20
      terminationGracePeriodSeconds: 300
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: kafka-webhook
  namespace: knative-eventing
  labels:
    eventing.knative.dev/release: devel
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: kafka-webhook
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 100
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: kafka-webhook
  namespace: knative-eventing
  labels:
    eventing.knative.dev/release: devel
spec:
  minAvailable: 80%
  selector:
    matchLabels:
      app: kafka-webhook
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: defaulting.webhook.kafka.messaging.knative.dev
  labels:
    kafka.eventing.knative.dev/release: devel
webhooks:
- admissionReviewVersions: ["v1", "v1beta1"]
  clientConfig:
    service:
      name: kafka-webhook
      namespace: knative-eventing
  sideEffects: None
  failurePolicy: Fail
  name: defaulting.webhook.kafka.messaging.knative.dev
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: validation.webhook.kafka.messaging.knative.dev
  labels:
    kafka.eventing.knative.dev/release: devel
webhooks:
- admissionReviewVersions: ["v1", "v1beta1"]
  clientConfig:
    service:
      name: kafka-webhook
      namespace: knative-eventing
  sideEffects: None
  failurePolicy: Fail
  name: validation.webhook.kafka.messaging.knative.dev
